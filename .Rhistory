diff_kampongs
lambak_list <- c("Perumahan Negara Lambak Kanan Kawasan 1", "Perumahan Negara Lambak Kanan Kawasan 2", "Perumahan Negara Lambak Kanan Kawasan 3", "Perumahan Negara Lambak Kanan Kawasan 4",
"Perumahan Negara Lambak Kanan Kawasan 5", "Kg. Lambak A", "Kg. Lambak B", "Kg. Lambak Kiri","STKRJ Lambak Kiri")
lambak_indices <- which(data_hp$kampong == "Kg. Lambak")
set.seed(123)
data_hp$kampong[lambak_indices] <- sample(lambak_list, length(lambak_indices), replace = TRUE)
kampong <- unique(bn_kpg_level_data$kampong)
kampong_am <- unique(data_hp$kampong)
#identifying different kampong names
identical(sort(kampong), sort(kampong_am))
diff_kampongs <- setdiff(kampong_am, kampong)
diff_kampongs
na_count <- data_hp %>%
summarise(NA_count = sum(is.na(kampong)))
na_count
mukim_for_na <- data_hp %>%
filter(is.na(kampong)) %>%
select(mukim)
# Print the result
print(mukim_for_na)
# Print the result
unique(mukim_for_na)
mg_list <- bn_kpg_level_data %>%
filter(mukim == "Mukim Gadong") %>%
pull (kampong)
# Replace NA values with random values from mg_list
data_hp <- data_hp %>%
mutate(kampong = if_else(is.na(kampong), sample(mg_list, sum(is.na(kampong)), replace = TRUE), kampong))
filtered_indices <- data_hp %>%
filter(is.na(kampong) & mukim == "Mukim Gadong") %>%
rownames()
filtered_indices
mukim_replacement <- c("Mukim Gadong A", "Mukim Gadong B")
mukim_indices <- which(data_hp$mukim == "Mukim Gadong")
set.seed(123)
data_hp$mukim[mukim_indices] <- sample(mukim_replacement, length(mukim_indices), replace = TRUE)
na_count <- data_hp %>%
summarise(NA_count = sum(is.na(kampong)))
na_count
mukim_for_na <- data_hp %>%
filter(is.na(kampong)) %>%
select(mukim)
# Print the result
unique(mukim_for_na)
mukim_replacement <- c("Mukim Berakas A", "Mukim Berakas B")
mukim_indices <- which(data_hp$mukim == "Mukim Berakas")
set.seed(123)
data_hp$mukim[mukim_indices] <- sample(mukim_replacement, length(mukim_indices), replace = TRUE)
na_count <- data_hp %>%
summarise(NA_count = sum(is.na(kampong)))
na_count
mukim_for_na <- data_hp %>%
filter(is.na(kampong)) %>%
select(mukim)
# Print the result
unique(mukim_for_na)
gadongA_indices <- which(is.na(data_hp$kampong) & data_hp$mukim == "Mukim Gadong A")
gadongA_indices
gadongA_list <- bn_kpg_level_data %>%
filter(mukim == "Mukim Gadong A") %>%
pull (kampong)
data_hp <- data_hp %>%
mutate(kampong = if_else(is.na(kampong) & mukim == "Mukim Gadong A",
sample(gadongA_list, sum(is.na(kampong) & mukim == "Mukim Gadong A"), replace = TRUE),
kampong))
gadongA_list <- bn_kpg_level_data %>%
filter(mukim == "Mukim Gadong A") %>%
pull(kampong)
# Replace NA values with random values from gadongA_list
data_hp <- data_hp %>%
mutate(kampong = if_else(is.na(kampong) & mukim == "Mukim Gadong A",
sample(gadongA_list, sum(is.na(kampong) & mukim == "Mukim Gadong A"), replace = TRUE),
kampong))
gadongA_indices
gadongA_list <- bn_kpg_level_data %>%
filter(mukim == "Mukim Gadong A") %>%
pull(kampong)
data_hp$kampong[gadongA_indices] <- sample(gadongA_list, length(gadongA_indices), replace = TRUE)
na_count <- data_hp %>%
summarise(NA_count = sum(is.na(kampong)))
na_count
mukim_for_na <- data_hp %>%
filter(is.na(kampong)) %>%
select(mukim)
# Print the result
unique(mukim_for_na)
gadongB_indices <- which(is.na(data_hp$kampong) & data_hp$mukim == "Mukim Gadong B")
gadongB_indices
gadongB_list <- bn_kpg_level_data %>%
filter(mukim == "Mukim Gadong B") %>%
pull(kampong)
data_hp$kampong[gadongB_indices] <- sample(gadongB_list, length(gadongB_indices), replace = TRUE)
mukim_for_na <- data_hp %>%
filter(is.na(kampong)) %>%
select(mukim)
# Print the result
unique(mukim_for_na)
berakasA_indices <- which(is.na(data_hp$kampong) & data_hp$mukim == "Mukim Berakas A")
berakasA_indices
berakasA_list <- bn_kpg_level_data %>%
filter(mukim == "Mukim Berakas A") %>%
pull(kampong)
data_hp$kampong[berakasA_indices] <- sample(berakasA_list, length(berakasA_indices), replace = TRUE)
na_count <- data_hp %>%
summarise(NA_count = sum(is.na(kampong)))
na_count
mukim_for_na <- data_hp %>%
filter(is.na(kampong)) %>%
select(mukim)
# Print the result
unique(mukim_for_na)
berakasB_indices <- which(is.na(data_hp$kampong) & data_hp$mukim == "Mukim Berakas B")
berakasB_indices
berakasB_list <- bn_kpg_level_data %>%
filter(mukim == "Mukim Berakas B") %>%
pull(kampong)
data_hp$kampong[berakasB_indices] <- sample(berakasB_list, length(berakasB_indices), replace = TRUE)
mukim_for_na <- data_hp %>%
filter(is.na(kampong)) %>%
select(mukim)
# Print the result
unique(mukim_for_na)
kotabatu_indices <- which(is.na(data_hp$kampong) & data_hp$mukim == "Mukim Kota Batu")
kotabatu_indices
kotabatu_list <- bn_kpg_level_data %>%
filter(mukim == "Mukim Kota Batu") %>%
pull(kampong)
data_hp$kampong[kotabatu_indices] <- sample(kotabatu_list, length(kotabatu_indices), replace = TRUE)
sengkurong_indices <- which(is.na(data_hp$kampong) & data_hp$mukim == "Mukim Sengkurong")
sengkurong_indices
sengkurong_list <- bn_kpg_level_data %>%
filter(mukim == "Mukim Sengkurong") %>%
pull(kampong)
data_hp$kampong[sengkurong_indices] <- sample(sengkurong_list, length(sengkurong_indices), replace = TRUE)
na_count <- data_hp %>%
summarise(NA_count = sum(is.na(kampong)))
na_count
mukim_for_na <- data_hp %>%
filter(is.na(kampong)) %>%
select(mukim)
# Print the result
unique(mukim_for_na)
kampong <- unique(bn_kpg_level_data$kampong)
kampong_am <- unique(data_hp$kampong)
#identifying different kampong names
identical(sort(kampong), sort(kampong_am))
diff_kampongs <- setdiff(kampong_am, kampong)
diff_kampongs
data_hp_joined <- data_hp %>%
left_join(bn_kpg_level_data, by = "kampong")
View(data_hp_joined)
data_hp_joined <- data_hp %>%
left_join(bn_kpg_level_data, by = "mukim")
data_hp_joined <- data_hp %>%
left_join(bn_kpg_level_data, by = "kampong")
View(data_hp_joined)
install.packages("writexl")
library(writexl)
write_xlsx(data_hp, path = "data-hp-cl.xlsx")
read_excel("data-hp-cl.xlsx")
data_hp_cl <- read_excel("data-hp-cl.xlsx")
data_hp_joined <- data_hp_cl %>%
left_join(bn_kpg_level_data, by = "kampong")
View(data_hp_joined)
data_hp_joined <- data_hp_cl %>%
right_join(bn_kpg_level_data, by = "kampong")
View(data_hp_cl)
View(data_hp_joined)
data_hp_join <- data_hp_cl %>%
right_join(bn_kpg_level_data, by = "kampong")
View(data_hp_join)
View(bn_kpg_level_data)
write_xlsx(data_hp_join, path = "data-hp-cl.xlsx")
data_hp_cl <- read_excel("data-hp-cl.xlsx")
na_kampong <- sum(is.na(data_hp_cl$kampong))
na_kampong
na_mukim <- sum(is.na(data_hp_cl$mukim))
na_mukim
na_mukim_indices <- which(is.na(data_hp_cl$mukim))
print(na_mukim_indices)
data_hp_cl <- read_excel("data-hp-cl.xlsx")
na_mukim <- sum(is.na(data_hp_cl$mukim))
na_mukim
3
View(data_hp_cl)
na_hp <- sum(is.na(data_hp_cl$price))
na_ho
na_hp
which(is.na(data_hp_cl$price)
check <- which(is.na(data_hp_cl$price)
check <- which(is.na(data_hp_cl$price)
check <- which(is.na(data_hp_cl$price))
check <- which(is.na(data_hp_cl$price))
check
data_hp_cl <- read_excel("data-hp-cl.xlsx")
na_kampong <- sum(is.na(data_hp_cl$kampong))
na_kampong
na_mukim <- sum(is.na(data_hp_cl$mukim))
na_mukim
na_hp <- sum(is.na(data_hp_cl$price))
na_hp
check <- which(is.na(data_hp_cl$price))
check
data_hp_cl <- read_excel("data-hp-cl.xlsx")
na_kampong <- sum(is.na(data_hp_cl$kampong))
na_kampong
na_mukim <- sum(is.na(data_hp_cl$mukim))
na_mukim
na_mukim_indices <- which(is.na(data_hp_cl$mukim))
print(na_mukim_indices)
na_hp <- sum(is.na(data_hp_cl$price))
na_hp
check <- which(is.na(data_hp_cl$price))
check
data_hp_cl$land_size <- round(data_hp_cl$land_size, 2)
data_hp_cl$land_size <- round(data_hp_cl$land_size, 2)
data_hp_cl <- read_excel("data-hp-cl.xlsx")
library(writexl)
library(readxl)
data_hp_cl <- read_excel("data-hp-cl.xlsx")
data_hp_cl <- read_excel("data/data-hp-cl.xlsx")
na_kampong <- sum(is.na(data_hp_cl$kampong))
na_kampong
na_mukim <- sum(is.na(data_hp_cl$mukim))
na_mukim
na_mukim_indices <- which(is.na(data_hp_cl$mukim))
print(na_mukim_indices)
na_hp <- sum(is.na(data_hp_cl$price))
na_hp
check <- which(is.na(data_hp_cl$price))
check
data_hp_cl$land_size <- round(data_hp_cl$land_size, 2)
data_hp_cl$land_size <- round(data_hp_cl$land_size, 2)
data_hp_cl$land_size <- as.numeric(as.character(data_hp_cl$land_size))
data_hp_cl$land_size <- round(data_hp_cl$land_size, 2)
unique(data_hp_cl$land_size)
rows_with_3125 <- data_hp_cl[data_hp_cl$land_size == 3125, ]
rows_with_3125
data_hp_cl <- read_excel("data/data-hp-cl.xlsx")
unique(data_hp_cl$land_size)
data_hp_cl$land_size <- round(data_hp_cl$land_size, 2)
data_hp_cl$land_size <- as.numeric(as.character(data_hp_cl$land_size))
data_hp_cl$land_size <- round(data_hp_cl$land_size, 2)
unique(data_hp_cl$land_size)
mean(data_hp_cl$land_size)
mean_value <- mean(data_hp_cl$land_size, na.rm = TRUE)
mean_value
test_data <- scraped_data1 %>% slice(1)
library(tidyverse)
library(readxl)
test_data <- scraped_data1 %>% slice(1)
# Read your data
scraped_data1 <- read_csv("data/houseprice_scraped.csv")
test_data <- scraped_data1 %>% slice(1)
# Run the extraction for just one caption
single_result <- test_data %>%
mutate(
extracted_info = map(caption, extract_info),
kampong = map_chr(extracted_info, ~ .["kampong"]),
price = map_chr(extracted_info, ~ .["price"]),
type = map_chr(extracted_info, ~ .["type"]),
storey = map_chr(extracted_info, ~ .["storey"]),
status = map_chr(extracted_info, ~ .["status"]),
land_size = map_chr(extracted_info, ~ .["land_size"]),
floor_size = map_chr(extracted_info, ~ .["floor_size"]),
beds = map_chr(extracted_info, ~ .["beds"]),
baths = map_chr(extracted_info, ~ .["baths"]),
land_type = map_chr(extracted_info, ~ .["land_type"]),
additional_remark = map_chr(extracted_info, ~ .["Additional Remark"])
)
# Define the extract_info function as before
extract_info <- function(caption) {
# Create command to send caption to ollama for processing
command <- paste('ollama run llama3.1 "Extract the following details from this caption: kampong, price, type, storey, status, land_size, floor_size, beds, baths, land_type, and anything else should go to Additional Remark. Caption: ', caption, '"', sep = "")
# Execute the command in terminal and get the output
result <- system(command, intern = TRUE)
return(result)
}
# Run the extraction for just one caption
single_result <- test_data %>%
mutate(
extracted_info = map(caption, extract_info),
kampong = map_chr(extracted_info, ~ .["kampong"]),
price = map_chr(extracted_info, ~ .["price"]),
type = map_chr(extracted_info, ~ .["type"]),
storey = map_chr(extracted_info, ~ .["storey"]),
status = map_chr(extracted_info, ~ .["status"]),
land_size = map_chr(extracted_info, ~ .["land_size"]),
floor_size = map_chr(extracted_info, ~ .["floor_size"]),
beds = map_chr(extracted_info, ~ .["beds"]),
baths = map_chr(extracted_info, ~ .["baths"]),
land_type = map_chr(extracted_info, ~ .["land_type"]),
additional_remark = map_chr(extracted_info, ~ .["Additional Remark"])
)
library(tidyverse)
# Read the data
scraped_data1 <- read_csv("data/houseprice_scraped.csv")
# Extract the first 10 captions and save them into a CSV
first_10_captions <- scraped_data1 %>%
slice(1:10) %>%
select(caption)
# Save the first 10 captions to a new CSV
write_csv(first_10_captions, "first_10_captions.csv")
test_data <- scraped_data1 %>% slice(1)
# Run the extraction for just one caption
single_result <- test_data %>%
mutate(
extracted_info = map(caption, extract_info),
kampong = map_chr(extracted_info, ~ .["kampong"]),
price = map_chr(extracted_info, ~ .["price"]),
type = map_chr(extracted_info, ~ .["type"]),
storey = map_chr(extracted_info, ~ .["storey"]),
status = map_chr(extracted_info, ~ .["status"]),
land_size = map_chr(extracted_info, ~ .["land_size"]),
floor_size = map_chr(extracted_info, ~ .["floor_size"]),
beds = map_chr(extracted_info, ~ .["beds"]),
baths = map_chr(extracted_info, ~ .["baths"]),
land_type = map_chr(extracted_info, ~ .["land_type"]),
additional_remark = map_chr(extracted_info, ~ .["Additional Remark"])
)
#create a function to process the rest of the captions
process_caption <- function(caption) {
caption_clean <- gsub('"', '', caption)
prompt <- paste0(
"Extract the following details from this:
- kampong: village in Brunei.
- price: Identify the price details.
- type: Identify the words - apartment, bungalow, detached, semi-detached.
- storey: Identify if it is a single storey or a double storey.
- status: Identify whther it is new, proposed, or under-construction.
- land_size: Extract the land size.
- floor_size: Extract the floor size.
- beds: Number of bedrooms.
- baths: Number of bathrooms.
- land_type: Identify if it Leasehold or In perpetuity or Kekal
- Additional Remark: The remaining details.
Caption: '", caption_clean, "'"
)
# Run the Ollama model on the prompt
result <- generate("llama3.1", prompt, output = "text")
return(result)
}
library(ollamar)
library(dplyr)
library(readxl)
library(writexl)
library(writexl)
library(ollamar)
library(dplyr)
library(readxl)
library(writexl)
#testing connection & ensure the model is pulled
test_connection()
pull("llama3.1")
install.packages("ollamar")
library(ollamar)
library(dplyr)
library(readxl)
library(writexl)
#testing connection & ensure the model is pulled
test_connection()
pull("llama3.1")
library(ollamar)
pull("llama3.1")
install.packages("ollamar")
pull("llama3.1")
??ollamar
pull("llama3")
pull("llama3.1")
pull ("llama3.1")
#testing connection & ensure the model is pulled
test_connection()
library(ollamar)
#testing connection & ensure the model is pulled
test_connection()
pull("llama3.1")
install.packages("ollamar")
library(ollamar)
library(dplyr)
library(readxl)
library(writexl)
#testing connection & ensure the model is pulled
test_connection()
pull("llama3.1")
install.packages("ollamar")
library(ollamar)
library(dplyr)
library(readxl)
library(writexl)
#testing connection & ensure the model is pulled
test_connection()
pull("llama3.1")
install.packages("ollamar")
library(ollamar)
#testing connection & ensure the model is pulled
test_connection()
pull("llama3.1")
kpg_mkm_df <- read.csv("/Users/amirabarizah/Documents/data-hp/data/bn_kpg_level_data.csv")
kpg_names <- gsub("^Kg\\.\\s*", "", kpg_mkm_df$kampong)
#converting to a single string for ollama prompt
kampong_list <- paste(kpg_names, collapse = ", ")
#vector of captions
hpsc <- read.csv("/Users/amirabarizah/Documents/data-hp/data/houseprice_scraped.csv")
hpsc_captions <- hpsc$caption
#create a function to process the rest of the captions
process_caption <- function(caption) {
caption_clean <- gsub('"', '', caption)
prompt <- paste0(
"Extract the following details from this:
- kampong: village in Brunei.
- price: Identify the price details.
- type: Identify the words - apartment, bungalow, detached, semi-detached.
- storey: Identify if it is a single storey or a double storey.
- status: Identify whther it is new, proposed, or under-construction.
- land_size: Extract the land size.
- floor_size: Extract the floor size.
- beds: Number of bedrooms.
- baths: Number of bathrooms.
- land_type: Identify if it Leasehold or In perpetuity or Kekal
- Additional Remark: The remaining details.
Caption: '", caption_clean, "'"
)
# Run the Ollama model on the prompt
result <- generate("llama3.1", prompt, output = "text")
return(result)
}
#empty list
results <- list()
#loop
for (i in 1:min(length(hpsc_captions), 50)) {
results[[i]] <- process_caption(hpsc_captions[i])
}
View(results)
results_df <- data.frame(results)
write_xlsx(results_df, "/Users/amirabarizah/Documents/data-hp/data/results_50.csv")
library(writexl)
results_df <- data.frame(results)
write_xlsx(results_df, "/Users/amirabarizah/Documents/data-hp/data/results_50.csv")
View(results)
# Convert the list of results to a dataframe
results_df <- data.frame(result = unlist(results))
write_xlsx(results_df, "/Users/amirabarizah/Documents/data-hp/data/results_50.csv")
# Convert the list of results to a dataframe
results_df <- data.frame(result = unlist(results))
# Save to an Excel file
write_xlsx(results_df, "/path/to/save/results.xlsx")
write_xlsx(results_df, "/Users/amirabarizah/Documents/data-hp/data/results_50.csv")
#create a function to process the rest of the captions
process_caption <- function(caption) {
caption_clean <- gsub('"', '', caption)
prompt <- paste0(
"Extract the following details from this:
- kampong: Identify the kampong (village in Brunei) mentioned.
- price: Identify the price details.
- type: Identify the words - apartment, bungalow, detached, semi-detached.
- storey: Identify if it is a single storey or a double storey.
- status: Identify whther it is new, proposed, or under-construction.
- land_size: Extract the land size.
- floor_size: Extract the floor size.
- beds: Number of bedrooms.
- baths: Number of bathrooms.
- land_type: Identify if it Leasehold or In perpetuity or Kekal
- Additional Remark: The remaining details.
Caption: '", caption_clean, "'"
)
# Run the Ollama model on the prompt
result <- generate("llama3.1", prompt, output = "text")
return(result)
}
#empty list
results <- list()
#loop
for (i in 40:min(length(hpsc_captions), 50)) {
results[[i]] <- process_caption(hpsc_captions[i])
}
# Convert the list of results to a dataframe
results_df <- data.frame(result = unlist(results))
write_xlsx(results_df, "/Users/amirabarizah/Documents/data-hp/data/results_50.csv")
#testing connection & ensure the model is pulled
test_connection()
pull("llama3.1")
#vector of captions
hpsc <- read.csv("/Users/amirabarizah/Documents/data-hp/data/houseprice_scraped.csv")
hpsc_captions <- hpsc$caption
#create a function to process the rest of the captions
process_caption <- function(caption) {
caption_clean <- gsub('"', '', caption)
prompt <- paste0(
"Extract the following details from this:
- kampong: Identify the kampong (village in Brunei) mentioned.
- price: Identify the price details.
- type: Identify the words - apartment, bungalow, detached, semi-detached.
- storey: Identify if it is a single storey or a double storey.
- status: Identify whther it is new, proposed, or under-construction.
- land_size: Extract the land size.
- floor_size: Extract the floor size.
- beds: Number of bedrooms.
- baths: Number of bathrooms.
- land_type: Identify if it Leasehold or In perpetuity or Kekal
- Additional Remark: The remaining details.
Caption: '", caption_clean, "'"
)
# Run the Ollama model on the prompt
result <- generate("llama3.1", prompt, output = "text")
return(result)
}
#empty list
results <- list()
#loop
for (i in 1:min(length(hpsc_captions), 100)) {
results[[i]] <- process_caption(hpsc_captions[i])
}
