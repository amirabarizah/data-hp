}
hpsc <- hpsc %>%
mutate(
CloseWords = sapply(caption, extract_kpg, kampong)
)
hpsc <- hpsc %>%
mutate(
Kampung = sapply(caption, extract_kpg, kampong)
)
hsp
View(hsp)
hsp_filtered <- hsp_data
hsp_data <- hsp_filtered
hpsc <- hpsc %>%
select(-CloseWords) #-CombinedNumbers, -Bathrooms, -BathroomsExtracted, -Bathroom, -BathroomExtracted, -Bedroom, -BedroomsExtracted, -Bedrooms, -BedroomExtracted)
write_excel (hpsc, "/Users/amirabarizah/Documents/data-hp/hpsc_data.xlsx")
library(writexl)
write_excel (hpsc, "/Users/amirabarizah/Documents/data-hp/hpsc_data.xlsx")
write_xlsx(hpsc, "/Users/amirabarizah/Documents/data-hp/hpsc_data.xlsx")
#sqft
hsp <- hsp |>
#remove desc with <= 5 words
mutate(caption = ifelse(str_count(caption, "\\w+") <= 5, "", caption)) |>
#parsing the built-up area
mutate(
BuiltUpAreaExtract = str_extract(caption, "\\d+[,.]?\\d*\\s*(sqft|SQ|Sq|SQFT|sq ft)")
) |>
#extract only the numeric part and convert to numeric type
mutate(
BuiltUpAreaExtract = str_extract(BuiltUpAreaExtract, "\\d+[,.]?\\d*") %>%
as.numeric()
)
View(hsp_data)
#sqft
hsp <- hsp |>
#remove desc with <= 5 words
mutate(desc = ifelse(str_count(desc, "\\w+") <= 5, "", desc)) |>
#parsing the built-up area
mutate(
BuiltUpAreaExtract = str_extract(desc, "\\d+[,.]?\\d*\\s*(sqft|SQ|Sq|SQFT|sq ft)")
) |>
#extract only the numeric part and convert to numeric type
mutate(
BuiltUpAreaExtract = str_extract(BuiltUpAreaExtract, "\\d+[,.]?\\d*") %>%
as.numeric()
)
View(hsp_data)
-
#sqft
hsp_data <- hsp_data |>
#remove desc with <= 5 words
mutate(desc = ifelse(str_count(desc, "\\w+") <= 5, "", desc)) |>
#parsing the built-up area
mutate(
BuiltUpAreaExtract = str_extract(desc, "\\d+[,.]?\\d*\\s*(sqft|SQ|Sq|SQFT|sq ft)")
) |>
#extract only the numeric part and convert to numeric type
mutate(
BuiltUpAreaExtract = str_extract(BuiltUpAreaExtract, "\\d+[,.]?\\d*") %>%
as.numeric()
)
View(hsp_data)
#sqft
hsp_data <- hsp_data |>
mutate(desc = ifelse(str_count(desc, "\\w+") <= 5, "", desc)) |>
mutate(
BuiltUpAreaExtract = str_extract(desc, "\\d{1,3}(?:,\\d{3})*(?:\\.\\d+)?\\s*(?i)(sqft|sq ft|sq|ft|SQFT)")
) |>
mutate(
BuiltUpAreaExtract = str_extract(BuiltUpAreaExtract, "\\d{1,3}(?:,\\d{3})*(?:\\.\\d+)?") %>%
gsub(",", "", .) %>%  # Remove commas for conversion
as.numeric()
)
#acre
hpsc_data <- hpsc_data %>%
mutate(
LandSizeExtract = str_extract(desc, "\\d+[,.]?\\s?\\d*\\s*(?=\\s*(acre|ac))") %>%  # Corrected lookahead
str_replace_all("\\s", "") %>%  # Remove any whitespace
as.numeric()  # Convert to numeric
)
View(hsp_data)
#acre
hsp_data <- hsp_data %>%
mutate(
LandSizeExtract = str_extract(desc, "\\d+[,.]?\\s?\\d*\\s*(?=\\s*(acre|ac))") %>%  # Corrected lookahead
str_replace_all("\\s", "") %>%  # Remove any whitespace
as.numeric()  # Convert to numeric
)
View(hsp_data)
#acre
hsp_data <- hsp_data %>%
mutate(
LandSizeExtract = str_extract(desc, "\\d+[,.]?\\s?\\d*\\s*(?=\\s*(acre|ac|ACRE|Acre))") %>%  # Corrected lookahead
str_replace_all("\\s", "") %>%  # Remove any whitespace
as.numeric()  # Convert to numeric
)
#sqft
hsp_data <- hsp_data |>
mutate(desc = ifelse(str_count(desc, "\\w+") <= 5, "", desc)) |>
mutate(
BuiltUpAreaExtract = str_extract(desc, "\\d{1,3}(?:,\\d{3})*(?:\\.\\d+)?\\s*(?i)(sqft|sq ft|sq|ft|SQFT|sf)")
) |>
mutate(
BuiltUpAreaExtract = str_extract(BuiltUpAreaExtract, "\\d{1,3}(?:,\\d{3})*(?:\\.\\d+)?") %>%
gsub(",", "", .) %>%  # Remove commas for conversion
as.numeric()
)
hsp_data <- hsp_data |>
# Remove desc with <= 5 words
mutate(desc = ifelse(str_count(desc, "\\w+") <= 5, "", desc)) |>
# Parsing the built-up area
mutate(
BuiltUpAreaExtract = str_extract(desc, "\\d{1,3}(?:,\\d{3})*(?:\\.\\d{0,4})?\\s*(?i)(sqft|sq ft|sq|ft|SQFT|sf)")
) |>
# Extract only the numeric part and convert to numeric type
mutate(
BuiltUpAreaExtract = str_extract(BuiltUpAreaExtract, "\\d{1,3}(?:,\\d{3})*(?:\\.\\d{0,4})?") %>%
gsub(",", "", .) %>%  # Remove commas for conversion
as.numeric()
)
hsp_data <- hsp_data |>
# Remove desc with <= 5 words
mutate(desc = ifelse(str_count(desc, "\\w+") <= 5, "", desc)) |>
# Parsing the built-up area in sqft/sf and other variations
mutate(
BuiltUpAreaExtract = str_extract(desc, "\\d{1,3}(?:,\\d{3})*(?:\\.\\d{0,4})?\\s*(sqft|sq ft|sq|ft|SQFT|sf)")
) |>
# Extract only the numeric part, remove any commas, and convert to numeric type
mutate(
BuiltUpAreaExtract = str_extract(BuiltUpAreaExtract, "\\d{1,3}(?:,\\d{3})*(?:\\.\\d{0,4})?") %>%
gsub(",", "", .) %>%  # Remove commas for conversion
as.numeric()
)
hsp_data <- hsp_data |>
# Remove desc with <= 5 words
mutate(desc = ifelse(str_count(desc, "\\w+") <= 5, "", desc)) |>
# Parsing the built-up area in sqft/sf and other variations
mutate(
BuiltUpAreaExtract = str_extract(desc, "\\d{1,3}(?:,\\d{3})*(?:\\.\\d{0,4})?\\s*(sqft|sq ft|sq|ft|SQFT|sf)")
) |>
# Extract only the numeric part, remove any commas, and convert to numeric type
mutate(
BuiltUpAreaExtract = str_extract(BuiltUpAreaExtract, "\\d{1,3}(?:,\\d{3})*(?:\\.\\d{0,4})?") %>%
gsub(",", "", .) %>%  # Remove commas for conversion
as.numeric()
)
hsp_data <- hsp_data |>
# Remove desc with <= 5 words
mutate(desc = ifelse(str_count(desc, "\\w+") <= 5, "", desc)) |>
# Parsing the built-up area in sqft/sf and other variations
mutate(
BuiltUpAreaExtract = str_extract(desc, "\\d{1,3}(?:,\\d{3})*(?:\\.\\d{0,4})?\\s*(sqft|sq ft|sq|ft|SQFT|sf)")
) |>
# Extract only the numeric part, remove any commas, and convert to numeric type
mutate(
BuiltUpAreaExtract = str_extract(BuiltUpAreaExtract, "\\d{1,3}(?:,\\d{3})*(?:\\.\\d{0,4})?|\\d+(?:\\.\\d{0,4})?") %>%
gsub(",", "", .) %>%  # Remove commas for conversion
as.numeric()
)
hsp_data <- hsp_data |>
mutate(
AreaNumber = str_extract(desc, "\\d{1,3}(?:,\\d{3})*(?=\\s*(sqft|sq ft|sq|ft|SQFT|sf))|\\d+(?=\\s*(sqft|sq ft|sq|ft|SQFT|sf))")
) |>
mutate(
AreaNumber = gsub(",", "", AreaNumber) %>%  # Remove commas for consistency
as.numeric()  # Convert to numeric type
)
View(hsp_data)
d
hsp_data <- hsp_data |>
# Remove desc with <= 5 words
mutate(desc = ifelse(str_count(desc, "\\w+") <= 5, "", desc)) |>
# Parsing the built-up area in sqft/sf and other variations
mutate(
BuiltUpAreaExtract = str_extract(desc, "\\d{1,3}(?:,\\d{3})*(?:\\.\\d{0,2})?\\s*(sqft|sq ft|sq|ft|SQFT|sf)")
) |>
# Extract only the numeric part, remove any commas, and convert to numeric type
mutate(
BuiltUpAreaExtract = str_extract(BuiltUpAreaExtract, "\\d{1,3}(?:,\\d{3})*(?:\\.\\d{0,2})?|\\d+(?:\\.\\d{0,2})?") %>%
gsub(",", "", .) %>%  # Remove commas for conversion
as.numeric()
)
# Example of extracting the number behind various area units
hsp_data <- hsp_data |>
mutate(
AreaNumber = str_extract(desc, "\\d{1,3}(?:,\\d{3})*(?=\\s*(sqft|sq ft|sq|ft|SQFT|sf))|\\d+(?=\\s*(sqft|sq ft|sq|ft|SQFT|sf))")
) |>
mutate(
AreaNumber = gsub(",", "", AreaNumber) %>%  # Remove commas for consistency
as.numeric()  # Convert to numeric type
)
View(hsp_data)
property_keywords <- c("bungalow","apartment", "appartment", "terrace", "terace", "semi-detached", "detached")
hsp_data <- hsp_data %>%
mutate(
PropertyTypeExtract = sapply(desc, fuzzy_extract, keywords = property_keywords)
)
#storey ✅
hsp_data <- hsp_data %>%
mutate(StoreyCount = str_extract(desc, "(\\d+\\.?\\d*|\\d+\\s*\\d+/\\d+|double|Double|Single|Triple|Quadruple|Three|Four|Five|Six|Seven|Eight|Nine|Ten|DOUBLE|SINGLE|THREE|FOUR|FIVE|SIX|TRIPLE|QUADRUPLE|SEVEN|EIGHT|NINE|TEN)\\s*-?\\s*[Ss][Tt][Oo][Rr][Ee][Yy]"))
#price
hsp_data <- hsp_data %>%
mutate(PriceExtracted = str_extract(desc,
"\\b(\\d+k|\\d{1,3}(,\\d{3})|\\d{1,3}+xxx|\\d{1,3}x\\s+\\w+|\\d{6}|\\d{5})\\b"))
hpsc <- hpsc %>%
drop_na(PriceExtracted)
hsp_data <- hsp_data %>%
drop_na(PriceExtracted)
#property status ✅
status_keywords <- c("complete","proposed", "ready", "approved", "under-construction")
hsp_data <- hsp_data%>%
mutate(
StatusExtract = sapply(desc, fuzzy_extract, keywords = status_keywords)
)
#extracting the common format i.e. "...R/...T" or "..R ..T"
hsp_data <- hsp_data %>%
mutate(
CombinedNumbers = str_extract_all(desc, "([1-9]|10)[RrTt]") %>%
sapply(paste, collapse = ", ")
)
unique(hsp_data$CombinedNumbers)
#extracting No. of Bedroom
hsp_data <- hsp_data %>%
mutate(
BedroomExtracted = str_extract(CombinedNumbers, "(\\d+)\\s*[Rr]") %>%
str_remove("[Rr]")
)
unique(hpsc$BedroomExtracted)
unique(hsp_data$BedroomExtracted)
#extracting No. of Bathroom
hsp_data <- hsp_data %>%
mutate(
BathroomExtracted = str_extract(CombinedNumbers, "(\\d+)\\s*[Tt]") %>%
str_remove("[Tt]")
)
unique(hpsc$BathroomExtracted)
unique(hsp_data$BathroomExtracted)
#extracting the coefficient of "... Bedroom/bedroom/BEDROOM"
hsp_data <- hsp_data %>%
mutate(
Bedrooms = str_extract(desc, "(\\d+)\\s*(?=\\s*[Bb]edroom[s]?)")  # Extract number before "Bedroom" variants
)
hsp_data <- hsp_data %>%
mutate(
Bathrooms = str_extract(desc, "(\\d+)\\s*(?=\\s*[Bb]athroom[s]?)")  # Extract number before "Bedroom" variants
)
#using coalesce to create the ultimate column for bd and bt
hsp_data <- hsp_data %>%
mutate(
CombinedBedrooms = coalesce(Bedrooms, BedroomsExtracted)
)
#using coalesce to create the ultimate column for bd and bt
hsp_data <- hsp_data %>%
mutate(
CombinedBedrooms = coalesce(Bedrooms, BedroomExtracted)
)
#extracting the common format i.e. "...R/...T" or "..R ..T"
hsp_data <- hsp_data %>%
mutate(
CombinedNumbers = str_extract_all(desc, "([1-9]|10)[RrTt]|([1-9]|10)[BRTB]") %>%
sapply(paste, collapse = ", ")
)
#extracting No. of Bedroom
hsp_data <- hsp_data %>%
mutate(
BedroomExtracted = str_extract(CombinedNumbers, "(\\d+)\\s*[Rr]") %>%
str_remove("[Rr]")
)
unique(hsp_data$BedroomExtracted)
#extracting No. of Bathroom
hsp_data <- hsp_data %>%
mutate(
BathroomExtracted = str_extract(CombinedNumbers, "(\\d+)\\s*[Tt]") %>%
str_remove("[Tt]")
)
unique(hsp_data$BathroomExtracted)
#extracting the coefficient of "... Bedroom/bedroom/BEDROOM"
hsp_data <- hsp_data %>%
mutate(
Bedrooms = str_extract(desc, "(\\d+)\\s*(?=\\s*[Bb]edroom[s]?)")  # Extract number before "Bedroom" variants
)
hsp_data <- hsp_data %>%
mutate(
Bathrooms = str_extract(desc, "(\\d+)\\s*(?=\\s*[Bb]athroom[s]?)")  # Extract number before "Bedroom" variants
)
#using coalesce to create the ultimate column for bd and bt
hsp_data <- hsp_data %>%
mutate(
CombinedBedrooms = coalesce(Bedrooms, BedroomExtracted)
)
unique(hsp_data$CombinedBedrooms)
hsp_data <- hsp_data %>%
mutate(
CombinedBathrooms = coalesce(Bathrooms, BathroomsExtracted)
)
hsp_data <- hsp_data %>%
mutate(
CombinedBathrooms = coalesce(Bathrooms, BathroomExtracted)
)
#extracting No. of Bedroom
hsp_data <- hsp_data %>%
mutate(
BedroomExtracted = str_extract(CombinedNumbers, "(\\d+)\\s*[Rr]|(\\d+)\\s*[B]") %>%
str_remove("[Rr]|[B]")
)
-
s
s
#extracting the coefficient of "... Bedroom/bedroom/BEDROOM"
hsp_data <- hsp_data %>%
mutate(
Bedrooms = str_extract(desc, "(\\d+)\\s*(?=\\s*[Bb]edroom[s]?)")  # Extract number before "Bedroom" variants
)
hsp_data <- hsp_data %>%
mutate(
Bathrooms = str_extract(desc, "(\\d+)\\s*(?=\\s*[Bb]athroom[s]?)")  # Extract number before "Bedroom" variants
)
#using coalesce to create the ultimate column for bd and bt
hsp_data <- hsp_data %>%
mutate(
CombinedBedrooms = coalesce(Bedrooms, BedroomExtracted)
)
unique(hsp_data$CombinedBedrooms)
hsp_data <- hsp_data %>%
mutate(
CombinedBathrooms = coalesce(Bathrooms, BathroomExtracted)
)
unique(hpsc$CombinedBathrooms)
#tidy up
hhsp_data <- hsp_data |>
# Clean the CombinedBedrooms column
mutate(CombinedBedrooms = trimws(CombinedBedrooms)) |> # Remove leading/trailing whitespaces
mutate(CombinedBedrooms = ifelse(CombinedBedrooms %in% c("00", "00 \n", "00 \n "), NA, CombinedBedrooms)) |> # Replace '00' with NA
mutate(CombinedBedrooms = as.numeric(CombinedBedrooms)) # Convert to numeric
unique(hsp_data$CombinedBedrooms)
#tidy up
hsp_data <- hsp_data |>
mutate(CombinedBedrooms = trimws(CombinedBedrooms)) |> # Remove leading/trailing whitespaces
mutate(CombinedBedrooms = ifelse(CombinedBedrooms %in% c("00", "00 \n", "00 \n "), NA, CombinedBedrooms)) |> # Replace '00' with NA
mutate(CombinedBedrooms = as.numeric(CombinedBedrooms)) # Convert to numeric
unique(hsp_data$CombinedBedrooms)
View(hsp_data)
hsp_data <- hsp_data |>
select(-BathroomExtracted, -Bathrooms, -Bedrooms, -BedroomExtracted, -CombinedNumbers)
hsp_data <- hsp_data %>%
select (-BuiltUpAreaExtract, -AreaNumber)
#sqft
library(dplyr)
library(stringr)
hsp_data <- hsp_data |>
mutate(desc = ifelse(str_count(desc, "\\w+") <= 5, "", desc)) |>
mutate(
Sqft = str_extract(desc, "\\d{1,3}(?:,\\d{3})*(?:\\.\\d{0,2})?\\s*(sqft|sq ft|sq|ft|SQFT|sf)")
) |>
mutate(
Sqft = gsub(",", "", Sqft) %>%
str_extract("\\d+(?:\\.\\d{0,2})?") %>%
as.numeric()
)
hsp_data <- hsp_data |>
mutate(desc = ifelse(str_count(desc, "\\w+") <= 5, "", desc)) |>
mutate(
Sqft = str_extract(desc, "\\d{1,3}(?:,\\d{3})*(?:\\.\\d{0,2})?\\s*(sqft|sq ft|sq|ft|SQFT|sf)")
)
hsp_data <- hsp_data |>
# Remove desc with <= 5 words
mutate(desc = ifelse(str_count(desc, "\\w+") <= 5, "", desc)) |>
# Parsing the built-up area in sqft/sf and other variations
mutate(
Sqft = str_extract(desc, "\\d{1,3}(?:,\\d{3})*(?:\\.\\d{0,2})?\\s*(sqft|sq ft|sq|ft|SQFT|sf)")
) |>
# Extract only the numeric part (including decimals), remove any commas, and convert to numeric type
mutate(
Sqft = gsub(",", "", Sqft) %>%  # Remove commas for conversion
str_extract("\\d+(?:\\.\\d{0,2})?") %>%  # Extract numeric part (including decimals)
as.numeric()  # Convert to numeric type
)
hsp_data <- hsp_data |>
# Remove desc with <= 5 words
mutate(desc = ifelse(str_count(desc, "\\w+") <= 5, "", desc)) |>
# Parsing the built-up area in sqft/sf and other variations
mutate(
Sqft = str_extract(desc, "\\d{1,4}(?:,\\d{3})*(?:\\.\\d{0,2})?\\s*(sqft|sq ft|sq|ft|SQFT|sf)")
) |>
# Extract only the numeric part (including decimals), remove any commas, and convert to numeric type
mutate(
Sqft = gsub(",", "", Sqft) %>%  # Remove commas for conversion
str_extract("\\d+(?:\\.\\d{0,2})?") %>%  # Extract numeric part (including decimals)
as.numeric()  # Convert to numeric type
)
hsp_data <- hsp_data |>
# Remove desc with <= 5 words
mutate(desc = ifelse(str_count(desc, "\\w+") <= 5, "", desc)) |>
# Parsing the built-up area in sqft/sf and other variations
mutate(
Sqft = str_extract(desc, "\\d{1,4}(?:,\\d{3})*(?:\\.\\d{0,2})?\\s*(sqft|sq ft|sq|ft|SQFT|sf|Sq Ft)")
) |>
# Extract only the numeric part (including decimals), remove any commas, and convert to numeric type
mutate(
Sqft = gsub(",", "", Sqft) %>%  # Remove commas for conversion
str_extract("\\d+(?:\\.\\d{0,2})?") %>%  # Extract numeric part (including decimals)
as.numeric()  # Convert to numeric type
)
hsp_data <- hsp_data |>
# Remove desc with <= 5 words
mutate(desc = ifelse(str_count(desc, "\\w+") <= 5, "", desc)) |>
# Parsing the built-up area in sqft/sf and other variations
mutate(
Sqft = str_extract(desc, "\\d{1,4}(?:,\\d{3})*(?:\\.\\d{0,2})?\\s*(sqft|sq ft|sq|ft|SQFT|sf|Sq Ft|++ sq ft)")
) |>
# Extract only the numeric part (including decimals), remove any commas, and convert to numeric type
mutate(
Sqft = gsub(",", "", Sqft) %>%  # Remove commas for conversion
str_extract("\\d+(?:\\.\\d{0,2})?") %>%  # Extract numeric part (including decimals)
as.numeric()  # Convert to numeric type
)
hsp_data <- hsp_data |>
mutate(desc = ifelse(str_count(desc, "\\w+") <= 5, "", desc)) |>
mutate(
Sqft = str_extract(desc, "\\d{1,4}(?:,\\d{3})*(?:\\.\\d{0,2})?\\s*[+]*\\s*(sqft|sq ft|sq|ft|SQFT|sf|Sq Ft)")
) |>
mutate(
Sqft = gsub(",", "", Sqft),
Sqft = gsub("[+]*", "", Sqft),
Sqft = as.numeric(str_extract(Sqft, "\\d+(?:\\.\\d{0,2})?"))
)
View(hsp_data)
landtype_keywords <- c("In perpetuity", "Leasehold", "Lease", "Kekal")
hsp_data <- hsp_data %>%
mutate(
LandType = sapply(desc, fuzzy_extract, keywords = landtype_keywords)
)
landtype_keywords <- c("In perpetuity", "Leasehold", "Lease", "Kekal")
hpsc <- hpsc %>%
mutate(
LandType = sapply(caption, fuzzy_extract, keywords = landtype_keywords)
)
View(hpsc)
landtype_keywords <- c("In perpetuity", "Leasehold", "Kekal")
hpsc <- hpsc %>%
mutate(
LandType = sapply(caption, fuzzy_extract, keywords = landtype_keywords)
)
write_xlsx(hpsc, "/Users/amirabarizah/Documents/data-hp/hpsc_data.xlsx")
write_excel(hsp_data, "/Users/amirabarizah/Documents/data-hp/data/hsp_data.xlsx")
write_xlsx(hsp_data, "/Users/amirabarizah/Documents/data-hp/data/hsp_data.xlsx")
library(ollamar)
library(tidyverse)
#test connection - ollama
test_connection()
pull("llama3.1")
library(ollamar)
pull("llama3.1")
install.packages("ollamar")
library(ollamar)
#test connection - ollama
test_connection()
pull("llama3.1")
desc_clean <- gsub('"', '', desc)
library(tidyverse)
#func. to loop all captions - using map to track progress
hsp_scraped <- map(
.x = hsp_captions[1410:min(1420, length(hsp_captions))],
.f = possibly(clean_caption, NA),
.progress = TRUE
)
#creating a vector of captions
hsp_captions <- hsp_filtered$desc
#func. to loop all captions - using map to track progress
hsp_scraped <- map(
.x = hsp_captions[1410:min(1420, length(hsp_captions))],
.f = possibly(clean_caption, NA),
.progress = TRUE
)
#check results
print(hsp_scraped)
#unlist
results_df <- data.frame(hsp_scraped = unlist(hsp_scraped))
#write into excel
write_xlsx(results_df, "/Users/amirabarizah/Documents/data-hp/data/hsp_trial.xlsx")
#write into excel
library(writexl)
write_xlsx(results_df, "/Users/amirabarizah/Documents/data-hp/data/hsp_trial.xlsx")
bruhome_data <- bruhome_data %>%
mutate(
KampongExtract = sapply(caption, fuzzy_extract, keywords = kampong)
)
bruhome_data <- bruhome_data %>%
mutate(
KampongExtract = sapply(Description, fuzzy_extract, keywords = kampong)
)
View(bruhome_data)
bruhome_data <- bruhome_data %>%
mutate(
KampongExtract = sapply(Kampong, fuzzy_extract, keywords = kampong)
)
bruhome_data <- bruhome_data %>%
mutate(
KampongExtract = sapply(Kampung, fuzzy_extract, keywords = kampong)
)
library(readr)
bn_kpg_level_data <- read_csv("data/kpg-sf/bn_kpg_level_data.csv")
View(bn_kpg_level_data)
diff_kampongs
diff_kampongs <- setdiff(kampong_bruhome, kampong)
diff_kampongs
kampong_bruhome <- bruhome_data$Kampung
diff_kampongs <- setdiff(kampong_bruhome, kampong)
diff_kampongs
library(readxl)
hpsc_data <- read_excel("data/ig/hpsc-2024/hpsc_data.xlsx")
View(hpsc_data)
